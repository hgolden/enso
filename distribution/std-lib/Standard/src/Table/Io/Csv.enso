from Standard.Base import all

import Standard.Table.Data.Table

polyglot java import org.enso.table.format.csv.Parser
polyglot java import java.io.ByteArrayInputStream

## Reads the contents of `this` and parses them as a CSV dataframe.

   Arguments
   - has_header: Specifies whether the first line of the file should be
     interpreted as a header, containing storage names. If set to `False`,
     storage names will be automatically generated.
   - prefix: text that should be prepended to automatically generated storage
     names. For example, if `prefix` is set to `X`, the columns will be named
     `X0`, `X1`, etc. This argument has no effect if the storage name is
     inferred from the CSV header row or set manually.
File.File.read_csv : Boolean -> Text -> Table
File.File.read_csv has_header=True prefix='C' =
    here.from_csv this has_header prefix

## Reads a CSV and turns it into a table.

   Arguments
   - has_header: Specifies whether the first line of the file should be
     interpreted as a header, containing storage names. If set to `False`,
     storage names will be automatically generated.
   - prefix: text that should be prepended to automatically generated storage
     names. For example, if `prefix` is set to `X`, the columns will be named
     `X0`, `X1`, etc. This argument has no effect if the storage name is
     inferred from the CSV header row or set manually.
from_csv : File.File | Text -> Boolean -> Text -> Table ! Parse_Error
from_csv csv has_header=True prefix='C' =
    parser_inst = Parser.create has_header prefix

    case csv of
        Text ->
            input_stream = ByteArrayInputStream.new csv.utf_8.to_array
            Table.Table (parser_inst.parse input_stream)
        File.File _ ->
            csv.with_input_stream [File.Option.Read] stream->
                stream.with_java_stream java_stream->
                    Table.Table (parser_inst.parse java_stream)
        _ ->
            found_type_name = Meta.get_qualified_type_name csv
            file_name = Meta.get_qualified_type_name File.File
            text_name = Meta.get_qualified_type_name Text
            message = "Found type " + found_type_name + ", expected " + file_name + " or " + text_name + "."
            Error.throw (Parse_Error message)

## An error that occurs when the provided contents could not be parsed as a CSV.

   Arguments:
   - message: The message that provides more details about the error.
type Parse_Error message

## UNSTABLE

   Converts the CSV parsing error into a
Parse_Error.to_display_text : Text
Parse_Error.to_display_text =
    "The input could not be parsed as a CSV: " + this.message

